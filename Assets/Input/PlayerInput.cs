//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""BasicControls"",
            ""id"": ""c5184b9b-a5ee-43c7-9781-98f129f4b932"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f94fe918-e76e-4b12-b454-9a4d92c1e891"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4e12cb4e-e0f5-47b1-a5b1-73957c3f48b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""3bdc4985-758b-4a66-a6ad-4609542cc0f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""10ecc612-b6b2-44d4-8cef-91fac8bf4f0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""7ffccb9b-7c97-4b25-b31a-d1f9a8751446"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Catalog"",
                    ""type"": ""Button"",
                    ""id"": ""7c4d30cf-6c36-45a1-a41d-96d0c8f791c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4c648729-73a3-41f0-adc3-2fce2ba63f9e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""33f7575a-b242-4912-a03a-70c4fedb3ed0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5cfa307d-75cb-483f-b2a2-eea30f8d2162"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9ea6f84b-b25f-40b7-92ec-f5f5930fd10b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""193f605b-00de-4331-af7c-3ea9a56337a5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5d7dde83-1744-4b33-ae47-653f04880b2b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d2264f1-6b16-49e7-a52d-ba6e2fe67916"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bdd0c1c-a1fc-4f88-90ec-981d571bdc55"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ec7dfb7-6bcc-40be-b13d-9422670b74f5"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7def7da-c33e-4f30-8b0c-359eb3ed14f9"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Catalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRInputs"",
            ""id"": ""d3115572-e316-455d-812c-0d61caa837a5"",
            ""actions"": [
                {
                    ""name"": ""Catalog"",
                    ""type"": ""Button"",
                    ""id"": ""0cf27e07-a744-400b-8229-fd1897144cc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""a1434289-e38c-4ae3-aaf8-fa4edfeb5984"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""9e19122b-615d-4e75-acce-04cf8d1c95e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""05ca94be-60d9-4168-b330-c9aadc083797"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""51c49955-5ae2-4254-a832-7a0b60774de5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToogleDistances"",
                    ""type"": ""Button"",
                    ""id"": ""0533d6b0-f017-48d6-85aa-8a611f689cce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ddee1071-e5db-4cac-965d-b569f0096d82"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Catalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c9ffe67-0f80-46b1-98ea-6a58636b377f"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de4782b2-48bd-4972-a839-e8c9791ec205"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62dd643a-64fe-4933-a806-2484baaf6248"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f856df87-133e-4135-ab97-3b8d0e3c630f"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6677accb-df6c-4882-8a72-80a7e4e84174"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToogleDistances"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicControls
        m_BasicControls = asset.FindActionMap("BasicControls", throwIfNotFound: true);
        m_BasicControls_Movement = m_BasicControls.FindAction("Movement", throwIfNotFound: true);
        m_BasicControls_Look = m_BasicControls.FindAction("Look", throwIfNotFound: true);
        m_BasicControls_Push = m_BasicControls.FindAction("Push", throwIfNotFound: true);
        m_BasicControls_Interact = m_BasicControls.FindAction("Interact", throwIfNotFound: true);
        m_BasicControls_Pause = m_BasicControls.FindAction("Pause", throwIfNotFound: true);
        m_BasicControls_Catalog = m_BasicControls.FindAction("Catalog", throwIfNotFound: true);
        // XRInputs
        m_XRInputs = asset.FindActionMap("XRInputs", throwIfNotFound: true);
        m_XRInputs_Catalog = m_XRInputs.FindAction("Catalog", throwIfNotFound: true);
        m_XRInputs_Cancel = m_XRInputs.FindAction("Cancel", throwIfNotFound: true);
        m_XRInputs_Pause = m_XRInputs.FindAction("Pause", throwIfNotFound: true);
        m_XRInputs_Confirm = m_XRInputs.FindAction("Confirm", throwIfNotFound: true);
        m_XRInputs_Rotate = m_XRInputs.FindAction("Rotate", throwIfNotFound: true);
        m_XRInputs_ToogleDistances = m_XRInputs.FindAction("ToogleDistances", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicControls
    private readonly InputActionMap m_BasicControls;
    private List<IBasicControlsActions> m_BasicControlsActionsCallbackInterfaces = new List<IBasicControlsActions>();
    private readonly InputAction m_BasicControls_Movement;
    private readonly InputAction m_BasicControls_Look;
    private readonly InputAction m_BasicControls_Push;
    private readonly InputAction m_BasicControls_Interact;
    private readonly InputAction m_BasicControls_Pause;
    private readonly InputAction m_BasicControls_Catalog;
    public struct BasicControlsActions
    {
        private @PlayerInput m_Wrapper;
        public BasicControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_BasicControls_Movement;
        public InputAction @Look => m_Wrapper.m_BasicControls_Look;
        public InputAction @Push => m_Wrapper.m_BasicControls_Push;
        public InputAction @Interact => m_Wrapper.m_BasicControls_Interact;
        public InputAction @Pause => m_Wrapper.m_BasicControls_Pause;
        public InputAction @Catalog => m_Wrapper.m_BasicControls_Catalog;
        public InputActionMap Get() { return m_Wrapper.m_BasicControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicControlsActions set) { return set.Get(); }
        public void AddCallbacks(IBasicControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Push.started += instance.OnPush;
            @Push.performed += instance.OnPush;
            @Push.canceled += instance.OnPush;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Catalog.started += instance.OnCatalog;
            @Catalog.performed += instance.OnCatalog;
            @Catalog.canceled += instance.OnCatalog;
        }

        private void UnregisterCallbacks(IBasicControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Push.started -= instance.OnPush;
            @Push.performed -= instance.OnPush;
            @Push.canceled -= instance.OnPush;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Catalog.started -= instance.OnCatalog;
            @Catalog.performed -= instance.OnCatalog;
            @Catalog.canceled -= instance.OnCatalog;
        }

        public void RemoveCallbacks(IBasicControlsActions instance)
        {
            if (m_Wrapper.m_BasicControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicControlsActions @BasicControls => new BasicControlsActions(this);

    // XRInputs
    private readonly InputActionMap m_XRInputs;
    private List<IXRInputsActions> m_XRInputsActionsCallbackInterfaces = new List<IXRInputsActions>();
    private readonly InputAction m_XRInputs_Catalog;
    private readonly InputAction m_XRInputs_Cancel;
    private readonly InputAction m_XRInputs_Pause;
    private readonly InputAction m_XRInputs_Confirm;
    private readonly InputAction m_XRInputs_Rotate;
    private readonly InputAction m_XRInputs_ToogleDistances;
    public struct XRInputsActions
    {
        private @PlayerInput m_Wrapper;
        public XRInputsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Catalog => m_Wrapper.m_XRInputs_Catalog;
        public InputAction @Cancel => m_Wrapper.m_XRInputs_Cancel;
        public InputAction @Pause => m_Wrapper.m_XRInputs_Pause;
        public InputAction @Confirm => m_Wrapper.m_XRInputs_Confirm;
        public InputAction @Rotate => m_Wrapper.m_XRInputs_Rotate;
        public InputAction @ToogleDistances => m_Wrapper.m_XRInputs_ToogleDistances;
        public InputActionMap Get() { return m_Wrapper.m_XRInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRInputsActions set) { return set.Get(); }
        public void AddCallbacks(IXRInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_XRInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRInputsActionsCallbackInterfaces.Add(instance);
            @Catalog.started += instance.OnCatalog;
            @Catalog.performed += instance.OnCatalog;
            @Catalog.canceled += instance.OnCatalog;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @ToogleDistances.started += instance.OnToogleDistances;
            @ToogleDistances.performed += instance.OnToogleDistances;
            @ToogleDistances.canceled += instance.OnToogleDistances;
        }

        private void UnregisterCallbacks(IXRInputsActions instance)
        {
            @Catalog.started -= instance.OnCatalog;
            @Catalog.performed -= instance.OnCatalog;
            @Catalog.canceled -= instance.OnCatalog;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @ToogleDistances.started -= instance.OnToogleDistances;
            @ToogleDistances.performed -= instance.OnToogleDistances;
            @ToogleDistances.canceled -= instance.OnToogleDistances;
        }

        public void RemoveCallbacks(IXRInputsActions instance)
        {
            if (m_Wrapper.m_XRInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_XRInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRInputsActions @XRInputs => new XRInputsActions(this);
    public interface IBasicControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnCatalog(InputAction.CallbackContext context);
    }
    public interface IXRInputsActions
    {
        void OnCatalog(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnToogleDistances(InputAction.CallbackContext context);
    }
}
